---
- When a Cluster is being created using the kubeadm tool,  it creates a file called admin.conf
- It's complete path is /etc/kubernetes/admin.conf
- We would then copy it to ~/.kube/config, so that kubectl uses this config file while sending requests to the kube-apiserver
- Note that we need to create the .kube directory before the previous step
- So now both /etc/kubernetes/admin.conf and ~/.kube/config would have the same content
- We should then make the current user and group own this file using 'sudo chown $(id -u):$(id -g) $HOME/.kube/config'
- This configuration file contains information such as clusters, kube-apiserver's URLs of the clusters, username, client certificate, etc.
- There is a section called 'users' under which we can view the list of usernames 
- and their respective base64 encoded client-certificate-data and client-key-data
- The client-certificate is an X509 certificate and the client-key-data is a private key
- By default we can see a 'kubernetes-admin' user in the configuration
- The Kubeadm tool should have created all the certificates and keys in the /etc/kubernets/pki directory
- Note that pki stands for Public Key Infrastructure
- Let's view the contents of the pki directory
[node1 ~]$ ls /etc/kubernetes/pki
apiserver-etcd-client.crt     apiserver.key       front-proxy-ca.key
apiserver-etcd-client.key     ca.crt              front-proxy-client.crt
apiserver-kubelet-client.crt  ca.key              front-proxy-client.key
apiserver-kubelet-client.key  etcd                sa.key
apiserver.crt                 front-proxy-ca.crt  sa.pub
- So there are certificates and keys for each of the software components of the Master node
- The certificate authority certificate ca.crt is the master certficate of the Kubernetes cluster
- ca.crt is like the root certificate for other certificates that are used for different purposes on the cluster
...
