---  # YAML files start with three hyphens and this is optional
# This is written like a yaml(yet another markup language / YAML ain't markup language) file
# so that the complete content can be used as a source to create the respective Kubernetes object(s)
# Hash (#) is used to display a comment and won't affect the yaml configuration
# A Service is a Kubernetes abstraction which would help applications (example: deployments) communicate with each other
# or with the outside world (example: Internet)
# The kube-proxy daemon on each worker node is responsible for the functioning of services
# kube-proxy works in the iptables mode by default
# iptables are used for configuring network access controls in a linux machine
# login to anyone worker node to check the kube-proxy mode
# networkandcode@gke-standard-cluster-1-default-pool-37ee9432-3mk6 ~ $ curl localhost:10249/proxyMode
# iptables
# so kube-proxy is using the port 10249 on the node and it exposes it's mode through the proxyMode endpoint
# Let's create a deployment with the following configuration, i have choosen the file name as ex26-deploy.yaml
# You may use a text editor like nano or vi to create the file

apiVersion: extensions/v1beta1  # you can get this from kubectl explain deploy
kind: Deployment
metadata:
  name: deploy26
spec:
  replicas: 3  # three number of Pods
  selector:
    matchLabels:
      tag: label26  # to match with one of the Pod's labels    
  template:  # Pod's configuration starts here
    metadata: # name of the Pod is not defined, as it will be configured automatically by the deployment
      labels:
        tag: label26 # this is a Pod label, we can add more if we desire to
    spec:
      containers:
      - name: ctr26
        image: k8s.gcr.io/echoserver:1.4  # we are pulling the echoserver image with version 1.4 from the google container registry
        # echoserver is a modified nginx server and when an HTTP GET request is sent, 
        # it displays the IP address of the machine from where the request is sent

# To create the deployment, execute kubectl create -f ex26-deploy.yaml
# networkandcode$ kubectl create -f ex26-deploy.yaml
# deployment.extensions/deploy26 created
# Let's check the pods created by the deployment
# networkandcode$ kubectl get pods
# NAME                        READY   STATUS    RESTARTS   AGE
# deploy26-6b8dd4f544-222xb   1/1     Running   0          6s
# deploy26-6b8dd4f544-4h6bk   1/1     Running   0          16s
# deploy26-6b8dd4f544-xsrxg   1/1     Running   0          16s

# Let's create a service to expose deployment26
# networkandcode$ kubectl expose deploy deploy26 --name=svc26 --port=80 --target-port=8080
# service/svc26 exposed
# port refers to the service port and target-port refers to the container(within the Pod) port
# Let's check the created service
# networkandcode$ kubectl get svc/svc26
# NAME    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
# svc26   ClusterIP   10.11.254.135   <none>        80/TCP    62s
# CLUSTER-IP is the IP which can be used with in the cluster with out any NAT (Network Address Translation)
# We can access the service IP from any node or Pod in the cluster
# Let's try to send an HTTP request using from one of the nodes
# networkandcode@gke-standard-cluster-1-default-pool-37ee9432-3mk6 ~ $ curl 10.11.254.135
# CLIENT VALUES:
# client_address=10.128.15.216
# command=GET
# real path=/
# query=nil
# request_version=1.1
# request_uri=http://10.11.254.135:8080/
# SERVER VALUES:
# server_version=nginx: 1.10.0 - lua: 10001
# HEADERS RECEIVED:
# accept=*/*
# host=10.11.254.135
# user-agent=curl/7.64.1
# BODY:
# -no body in request-
# As we are aware the echoserver container displays the IP of the requestor, its shown in the client_address section above
# In this case it's the node's IP address 10.128.15.216
... # YAML files end with three dots and this is optional too
